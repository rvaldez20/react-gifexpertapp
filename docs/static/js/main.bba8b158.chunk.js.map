{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","c","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"mMAyCeA,EArCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEpB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAmBA,OACG,sBAAMC,SAbY,SAACC,GACnBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAC,OAAMP,GAAN,mBAAqBO,OACrCN,EAAc,MAOjB,SACG,uBACGO,KAAK,OACLC,MAAQT,EACRU,SAtBiB,SAACP,GAExBF,EAAcE,EAAEQ,OAAOF,QAqBjBG,YAAY,oB,+BC9BXC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEdC,EAFc,iDAEmCC,UAAWH,GAF9C,+DAGDI,MAAOF,GAHN,cAGdG,EAHc,gBAIGA,EAAKC,OAJR,uBAIZC,EAJY,EAIZA,KAGFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACJC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXpB,kBAebM,GAfa,4CAAH,sDCaLO,EAZK,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAI3B,OACG,sBAAKc,UAAU,yCAAf,UACG,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCqBCO,EA1BC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAGhB,ECHyB,SAAEA,GAE3B,MAA0Bf,mBAAS,CAChCsB,KAAM,GACNa,SAAS,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAuBA,OAlBAC,qBAAW,WAGRxB,EAASC,GACLwB,MAAM,SAAAC,GAKDH,EAAS,CACNf,KAAMkB,EACNL,SAAS,SAKrB,CAACpB,IAEGqB,EDtB0BK,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAGrB,OACG,eAAC,WAAD,WACG,oBAAIJ,UAAU,oCAAd,SAAqDhB,IAEnDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEb,qBAAKA,UAAU,YAAf,SAEMH,EAAOJ,KAAK,SAAAC,GAAG,OACZ,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEShBgB,EAzBM,WAElB,MAAoC1C,mBAAS,CAAC,cAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAEA,OACG,eAAC,WAAD,WACG,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEM4C,EAAWnB,KAAK,SAACT,EAAU6B,GAAX,OACb,cAAC,EAAD,CAEG7B,SAAWA,GADLA,Y,MCX3B8B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.bba8b158.chunk.js","sourcesContent":["\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n\r\n   const [inputValue, setInputValue] = useState('');\r\n   \r\n   const handleInputChange = (e) => {\r\n      // console.log(e.target.value);\r\n      setInputValue(e.target.value);\r\n   }\r\n\r\n   const handleSubmit = (e) => {\r\n      e.preventDefault();      \r\n      // console.log('Submit Hecho');\r\n\r\n      if( inputValue.trim().length > 0 ) {\r\n         setCategories( c => [ inputValue, ...c ] );\r\n         setInputValue('');\r\n      }\r\n\r\n   }\r\n\r\n\r\n   return (\r\n      <form onSubmit={ handleSubmit }>\r\n         <input \r\n            type=\"text\"\r\n            value={ inputValue }\r\n            onChange={ handleInputChange }\r\n            placeholder='New category'\r\n         />\r\n      </form>\r\n   )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n   setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","\r\nexport const getGifs = async( category ) => {\r\n   // se hace la petición HTTP para traer las imagenes gif\r\n   const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=kosDPrQeAWRFfEe4qpy7V3a1XWuoESQL`;\r\n   const resp = await fetch( url )\r\n   const { data } = await resp.json();\r\n\r\n   // solo nos traemos lo que necesitamos de la peticion a la APIaa\r\n   const gifs = data.map( img => {\r\n      return {\r\n         id: img.id,\r\n         title: img.title,\r\n         url: img.images?.downsized_medium.url\r\n      }\r\n   })\r\n\r\n   return gifs;\r\n}","import React from 'react'\r\n\r\nconst GifGridItem = ({ title, url }) => {\r\n\r\n   // console.log(id,title,url);\r\n\r\n   return (\r\n      <div className=\"card animate__animated animate__fadeIn\">\r\n         <img src={ url } alt={ title } />\r\n         <p>{ title }</p>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React, { Fragment } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n   //usamos  el custom Hook\r\n   const { data:images, loading } = useFetchGifs( category );\r\n   // console.log(data. loading);\r\n\r\n   return (\r\n      <Fragment>\r\n         <h3 className=\"animate__animated animate__fadeIn\" >{ category }</h3>     \r\n         \r\n         { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\r\n\r\n         <div className=\"card-grid\">\r\n            {\r\n               images.map( img => (\r\n                  <GifGridItem\r\n                     key={ img.id }\r\n                     { ...img }\r\n                  />\r\n               ))\r\n            }\r\n         </div>\r\n      </Fragment>\r\n   )\r\n}\r\n\r\nexport default GifGrid\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n   // Sedefine el state con un objeto vacio que tendra la data y el loading\r\n   const [state, setState] = useState({\r\n      data: [],\r\n      loading: true\r\n   });\r\n\r\n   useEffect( () => {      \r\n      // getGifs es una funcion async por lo que devuelve una promesa\r\n      // Esta hace la petición HTTP a la API de GHIPY (imagens gif)\r\n      getGifs( category )\r\n         .then( imgs => {\r\n\r\n            // setTimeout(() => {\r\n               // console.log(imgs)\r\n               \r\n               setState({\r\n                  data: imgs,\r\n                  loading: false\r\n               })               \r\n            // }, 3000);\r\n\r\n         })\r\n   }, [category])\r\n\r\n   return state; // retorrna {data:[], loading: true}\r\n\r\n}","import React, { Fragment, useState } from 'react'\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n  \r\n   const [categories, setCategories] = useState(['One Punch']);\r\n\r\n   return (\r\n      <Fragment>\r\n         <h2>GifExpertApp</h2>\r\n         <AddCategory setCategories={ setCategories } />\r\n         <hr />\r\n\r\n         <ol>\r\n           { \r\n               categories.map( (category, i) => (\r\n                  <GifGrid\r\n                     key={ category }\r\n                     category={ category } \r\n                  /> \r\n               ))\r\n           }               \r\n         </ol>\r\n\r\n      </Fragment>\r\n   )\r\n}\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}